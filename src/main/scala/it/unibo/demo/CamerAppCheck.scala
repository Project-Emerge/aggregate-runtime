package it.unibo.demo
/*
 * This Java source file was generated by the Gradle 'init' task.
 */ /*
 * This Java source file was generated by the Gradle 'init' task.
 */

import it.unibo.artificial_vision_tracking
import it.unibo.artificial_vision_tracking.aruco_markers.*
import org.bytedeco.javacpp.Loader
import org.bytedeco.javacv.FrameGrabber
import org.bytedeco.opencv.opencv_java
import org.opencv.core.Mat
import org.opencv.objdetect.Objdetect

import java.util
import java.util.{ArrayList, List}

object App {
  @throws[FrameGrabber.Exception]
  @throws[InterruptedException]
  def main(args: Array[String]): Unit = {
    val markersX = 11 // Numero di marker sull'asse X
    val markersY = 8 // Numero di marker sull'asse Y
    val markerLength = 0.07f // Lunghezza del marker (in metri)
    val selectedCamera = 0
    val dictionaryType = Objdetect.DICT_4X4_100
    val cameraParam = new util.ArrayList[Mat]
    var cameraMatrix = new Mat
    var distCoeffs = new Mat
    cameraMatrix = new Mat(3, 3, org.opencv.core.CvType.CV_64F)
    val data: Array[Double] =
      Array[Double](1340.821804232236, 0.0, 945.5377637384079, 0.0, 1339.251046705548, 581.4177912549047, 0.0, 0.0, 1.0)
    cameraMatrix.put(0, 0, data: _*)
    distCoeffs = new Mat(1, 5, org.opencv.core.CvType.CV_64F)
    val data2: Array[Double] = Array[Double](-0.3898373600798533, 0.08115247413122996, -1.965974706520358e-05,
      -0.0006330161088470909, 0.1140937797457088)
    distCoeffs.put(0, 0, data: _*)
    cameraParam.add(cameraMatrix)
    cameraParam.add(distCoeffs)
    val cp = new CameraPose(cameraParam.get(0), cameraParam.get(1), markerLength, dictionaryType, selectedCamera)
    cp.calcPose();
    val camera = cp.getCamera
    while (true) {
      val result = cp.capturePositioning(camera)
      System.out.println("-----")
      result.forEach:
        p =>
          System.out.println("ID: " + p.getId + " X: " + p.getX + " Y: " + p.getY + " Rot: " + p.getRotation * 180 / Math.PI)
      Thread.sleep(300)
    }
    // Test to calculate the pose of a single frame
    /*VideoCapture capture = cp.getCamera();
            long startTime = System.currentTimeMillis();
            int i = 0;
            //A FRAME LIMITER MAY BE REQUIRED (not sure about this)
            while(i < 100){
                System.out.println("\n" + cp.calcSinglePose(capture)[0].dump() + "\n");
                i++;
            }
            long endTime = System.currentTimeMillis();
            System.out.println("Avg frame time: " + (endTime - startTime) / i + "ms");
     */
    // Test of the RobotScreenSaver
    // RobotScreenSaver.screenSaver(cameraParam.get(0), cameraParam.get(1), markerLength, dictionary, selectedCamera);
  }

  try Loader.load(classOf[opencv_java])

}
